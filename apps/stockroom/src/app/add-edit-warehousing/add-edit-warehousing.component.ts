import { Component, effect, Inject, inject, untracked } from '@angular/core';
import { CommonModules, CONFIRMATION_SERVICE_CONFIG } from '@view/lib/values';
import { ClDatePickerComponent } from '@sadad/component-lib/src/lib/date-picker';
import { BaseComponent, HeadingComponent } from '@view/lib/components';
import { WarehousingModel, warehousingStateDataMapper, WarehousingStateEnum } from '@domain/lib/stockroom';
import { AttachmentFacade, WarehousingFacade } from '@state/lib/facade';
import { ActionInvokeService } from '@view/lib/ui-services';
import { WarehousingForm } from '../../forms/warehousing.form';
import { FormControl, Validators } from '@angular/forms';
import { HttpContext, HttpParams } from '@angular/common/http';
import { SKIP_LOADING } from '@sadad/component-lib/src/interceptors';
import { EndpointsEnum } from '@view/lib/data-types';
import { ClFileUploadComponent } from '@sadad/component-lib/src/lib/file-uploader';
import { ClAction, ClConfirmation } from '@sadad/component-lib/src/models';
import { AttachmentGateway, AttachmentModel, getFileUseCaseProvider } from '@domain/lib/document-management';
import { AttachmentImplementationService } from '@api/lib/impl';

@Component({
  selector: 'stockroom-add-edit-warehousing',
  standalone: true,
  imports: [CommonModules, ClDatePickerComponent, ClFileUploadComponent, HeadingComponent],
  providers: [
    {provide: AttachmentGateway, useClass: AttachmentImplementationService},
    AttachmentFacade,
    getFileUseCaseProvider,
  ],
  templateUrl: './add-edit-warehousing.component.html',
  styles: `
  .warehousing-attachments cl-file-uploader .cl-file-uploader-buttonbar cl-button:nth-of-type(2) { display: none }`
})
export class AddEditWarehousingComponent extends BaseComponent<WarehousingModel>{
  readonly warehousingFacade = inject(WarehousingFacade);
  readonly attachmentFacade = inject(AttachmentFacade);
  readonly #invokeService = inject(ActionInvokeService);

  httpContext = new HttpContext().set(SKIP_LOADING, true);
  endpointsEnum: typeof EndpointsEnum = EndpointsEnum;
  deletingAttachmentId!: string;

  constructor(@Inject(CONFIRMATION_SERVICE_CONFIG) public confirmationConfig: ClConfirmation) {
    super();

    this.formGroup = this.fb.group<WarehousingForm>({
      id: new FormControl,
      autoGeneratedCode: new FormControl({value: null, disabled: true}),
      state: new FormControl({value: WarehousingStateEnum.INITIAL_SUBMIT, disabled: true}, {nonNullable: true}),
      stateString: new FormControl({value: warehousingStateDataMapper.get(WarehousingStateEnum.INITIAL_SUBMIT), disabled: true}, {nonNullable: true}),
      stockroomId: new FormControl({ value: null, disabled: true }, {validators: [Validators.required]}),
      stockroomTitle: new FormControl,
      fiscalYearId: new FormControl(null, {validators: [Validators.required]}),
      fiscalYearTitle: new FormControl,
      startDate: new FormControl(null, {validators: [Validators.required]}),
      endDate: new FormControl(null, {validators: [Validators.required]}),
      description: new FormControl,
      attachedFiles: new FormControl
    });

    this.destroyObservable(this.#invokeService.getMethodInvocation()).subscribe(
      () => {
        this.saveOrUpdateWarehousing();
      }
    );

    effect(() => {
      const edit = this.warehousingFacade.warehousingStore.state$().editMode$();
      const selectedWarehousing = this.warehousingFacade.warehousingStore.state$().selectedWarehousing$();

      untracked(() => {
        if (edit) {
          this.formGroup.patchValue(selectedWarehousing);
          this.formGroup.get('stockroomId')?.enable();
        } else {
          this.formGroup.reset();
        }
      });
    });
  }

  toggleStockroom() {
    if (this.formGroup.get('fiscalYearId')?.value) {
      this.formGroup.get('stockroomId')?.enable();
    } else {
      this.formGroup.get('stockroomId')?.disable();
    }
  }

  deleteAttachment(event: {action: ClAction, row: AttachmentModel}) {
    this.deletingAttachmentId = event.row.id ?? '';
    if (event.action.key == 'download') {
      this.attachmentFacade.downloadFileById(event.row);
    }
  }

  deleteFileHttpParams() {
    return new HttpParams().set('attachmentId', this.deletingAttachmentId);
  }

  saveOrUpdateWarehousing() {
    this.formGroup.markAllAsTouched();
    if (this.formGroup.valid) {
      this.formGroup?.markAsUntouched();
      this.warehousingFacade.warehousingStore.state$().editMode$()
      ? this.warehousingFacade.updatedWarehousing(this.formGroup.value)
      : this.warehousingFacade.savedWarehousing(this.formGroup.value);
    }
  }
}
