import {
  Component,
  computed,
  effect,
  Inject,
  inject,
  OnInit,
  signal,
  untracked,
  ViewEncapsulation,
  WritableSignal
} from '@angular/core';
import { CommonModules, CONFIRMATION_SERVICE_CONFIG } from '@view/lib/values';
import { BaseComponent, CrudComponent } from '@view/lib/components';
import {
  deleteWarehousingUseCaseProvider,
  getWarehousingCountRoundUseCaseProvider,
  getWarehousingDataUseCaseProvider,
  saveWarehousingItemsUseCaseProvider,
  saveWarehousingUseCaseProvider,
  updateWarehousingUseCaseProvider,
  WarehousingGateway,
  WarehousingItemGateway,
  WarehousingModel,
  warehousingStateDataMapper,
  WarehousingStateEnum
} from '@domain/lib/stockroom';
import { WarehousingFacade } from '@state/lib/facade';
import { ClAction, ClColumn, ClColumnDataType, ClConfirmation } from '@sadad/component-lib/src/models';
import { DataTableAction } from '@view/lib/models';
import { AddEditWarehousingComponent } from '../add-edit-warehousing/add-edit-warehousing.component';
import { cacheClear, ErrorLogger } from '@sadad/component-lib/src/decorators';
import { ActionInvokeService } from '@view/lib/ui-services';
import { ClConfirmationService } from '@sadad/component-lib/src/services';
import { WarehousingImplementationService, WarehousingItemImplementationService } from '@api/lib/impl';
import { Crud } from '@view/lib/data-types';
import { WarehousingCountRoundComponent } from '../warehousing-count-round/warehousing-count-round.component';


@Component({
  selector: 'stockroom-warehousing',
  standalone: true,
  imports: [CommonModules, CrudComponent, AddEditWarehousingComponent, WarehousingCountRoundComponent],
  providers: [
    {provide: WarehousingGateway, useClass: WarehousingImplementationService},
    {provide: WarehousingItemGateway, useClass: WarehousingItemImplementationService},
    WarehousingFacade,
    getWarehousingDataUseCaseProvider,
    saveWarehousingUseCaseProvider,
    updateWarehousingUseCaseProvider,
    deleteWarehousingUseCaseProvider,
    getWarehousingCountRoundUseCaseProvider,
    saveWarehousingItemsUseCaseProvider,
  ],
  encapsulation: ViewEncapsulation.None,
  templateUrl: './warehousing.component.html',
  styleUrl: './warehousing.component.scss',
})
export class WarehousingComponent extends BaseComponent<WarehousingModel> implements OnInit {
  protected readonly warehousingFacade = inject(WarehousingFacade);
  readonly #invokeService = inject(ActionInvokeService);
  readonly #confirmationService = inject(ClConfirmationService);

  cols!: ClColumn[];
  actions?: DataTableAction[];

  actionsType: WritableSignal<Crud> = signal<Crud>('Create');
  actionTitle: WritableSignal<string> = signal<string>('');

  constructor(@Inject(CONFIRMATION_SERVICE_CONFIG) public confirmationConfig: ClConfirmation) {
    super();

    effect(() => {
      const activeFiscalPeriod = this.appFacade.appStore.state$().activeFiscalPeriod$();
      untracked(() => {
        if (activeFiscalPeriod?.id) {
          cacheClear['updateWarehousingList'].clear();
          this.warehousingFacade.updateWarehousingList({});
        }
      });
    });
  }

  ngOnInit() {
    this.first$ = computed(() => this.warehousingFacade.warehousingStore.state$().pageNumber$() * this.warehousingFacade.warehousingStore.state$().pageSize$());
    this.showPaginator$ = computed(() => this.warehousingFacade.warehousingStore.state$().total$() > this.warehousingFacade.warehousingStore.state$().pageSize$());
    this.warehousingFacade.updateAllowedActions(this.appFacade.appStore.state$().loggedInUser$()?.permissions?.find(p => p.data.name == this.permissionKey)?.data?.value || []);

    this.cols = [
      {
        colSpan: 1,
        value: ['autoGeneratedCode'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('stockroom.warehousing.code')
      },
      {
        colSpan: 1,
        value: ['stockroomTitle'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('stockroom.')
      },
      {
        colSpan: 1,
        value: ['fiscalYearTitle'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('stockroom.fiscal-year.')
      },
      {
        colSpan: 1,
        value: ['startDatePersian'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('start-date')
      },
      {
        colSpan: 1,
        value: ['endDatePersian'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('end-date')
      },
      {
        colSpan: 1,
        value: ['state'],
        valueMapper: [warehousingStateDataMapper],
        cellConfig: [
          { key: "state", value: WarehousingStateEnum.INITIAL_SUBMIT, styleClass: "warehousing-state initial-submit"},
          { key: "state", value: WarehousingStateEnum.COUNTING_STARTED, styleClass: "warehousing-state counting-started"},
          { key: "state", value: WarehousingStateEnum.FIRST_ROUND, styleClass: "warehousing-state first-round"},
          { key: "state", value: WarehousingStateEnum.SECOND_ROUND, styleClass: "warehousing-state second-round"},
          { key: "state", value: WarehousingStateEnum.END_OF_COUNTING, styleClass: "warehousing-state end-of-counting"},
          { key: "state", value: WarehousingStateEnum.MODIFIED_DOCUMENT_ISSUED, styleClass: "warehousing-state modified-document-issued"},
          { key: "state", value: WarehousingStateEnum.DOCUMENT_ISSUED, styleClass: "warehousing-state document-issued"},
        ],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('status')
      }
    ];

    this.actions = [
      {
        label: this.translate.instant('edit'),
        icon: 'edit',
        index: 0,
        styleClasses: 'blue-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [WarehousingStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => this.openEditDialog(event),
        key: 'Update'
      },
      {
        label: this.translate.instant('delete'),
        icon: 'delete',
        index: 1,
        styleClasses: 'red-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [WarehousingStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => this.deleteWarehousing(event),
        key: 'Delete'
      },
      {
        label: this.translate.instant('finalize-submit'),
        icon: 'send',
        index: 2,
        styleClasses: 'amber-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [WarehousingStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => {},
        key: 'Finalize'
      },
      {
        label: this.translate.instant('stockroom.warehousing.counting-round'),
        icon: 'warehouse',
        index: 3,
        styleClasses: 'green-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [WarehousingStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => {
          this.actionTitle.set(this.translate.instant('stockroom.warehousing.counting-round'));
          this.actionsType.set('InventoryCountIssuance');
          this.warehousingFacade.toggleDialogVisibility(true);
        },
        key: 'InventoryCountIssuance'
      },
      {
        label: this.translate.instant('stockroom.warehousing.counting-start'),
        icon: 'flag',
        index: 4,
        styleClasses: 'blue-grey-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [WarehousingStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => {},
        key: 'InventoryCountStart'
      },
      {
        label: this.translate.instant('stockroom.warehousing.beginning-of-fiscal-period-document-issued'),
        icon: 'export_notes',
        index: 5,
        styleClasses: 'cyan-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [WarehousingStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => {},
        key: 'BeginningPeriodDocIssuance'
      },
      {
        label: this.translate.instant('stockroom.warehousing.modified-document-issued'),
        icon: 'article_shortcut',
        index: 6,
        styleClasses: 'brown-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [WarehousingStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => {},
        key: 'CorrectivDocIssuance'
      },
    ];
  }

  confirmWarehousingStateChange(event: { action: DataTableAction, row: WarehousingModel }, nextState: WarehousingStateEnum) {
    this.#confirmationService.confirm(this.viewRef, {
      ...this.confirmationConfig,
      message: this.translate.instant('messages.sure-to-change-state', {value: this.translate.instant('stockroom.warehousing.')}),
      accept: () => this.warehousingFacade.updateWarehousingState({ ...event.row, nextState: nextState }),
    });
  }

  openEditDialog(event: { action: ClAction, row: WarehousingModel }) {
    this.actionsType.set('Update');
    this.actionTitle.set(this.translate.instant('stockroom.warehousing.edit'));
    if (event.row) {
      this.warehousingFacade.toggleDialogVisibility(true);
      this.warehousingFacade.toggleEditMode(true);
      this.warehousingFacade.updateSelectedWarehousing(event.row);
    }
  }

  /**
   * Save Or Update Warehousing
   */
  @ErrorLogger()
  saveOrUpdateWarehousing() {
    this.#invokeService.invokeMethod('add or update warehousing');
  }

  /**
   * Reset Form
   */
  resetForm() {
    this.warehousingFacade.toggleDialogVisibility(false);
    this.formGroup?.markAsUntouched();
  }

  /**
   * Filter Warehousing
   */
  filterWarehousing(event: WarehousingModel) {
    cacheClear['updateWarehousingList'].clear();
    this.warehousingFacade.updatePage(this.warehousingFacade.warehousingStore.state$().pageSize$(), 0);
    this.warehousingFacade.updateWarehousingList({
      ...event,
      pageNumber: this.warehousingFacade.warehousingStore.state$().pageNumber$(),
      pageSize: this.warehousingFacade.warehousingStore.state$().pageSize$()
    });
  }

  /**
   * Clear Filters
   */
  clearFilters() {
    cacheClear['updateWarehousingList'].clear();
    this.formGroup?.markAsUntouched();
  }

  /**
   * Set Edit Mode
   */
  seEditMode() {
    this.actionsType.set('Create');
    this.actionTitle.set(this.translate.instant('stockroom.warehousing.add'));
    this.formGroup?.markAsUntouched();
    this.warehousingFacade.toggleEditMode(false);
    this.warehousingFacade.toggleDialogVisibility(true);
  }

  /**
   * Delete Warehousing
   * @param event
   */
  deleteWarehousing(event: { action: ClAction, row: WarehousingModel }) {
    this.#confirmationService.confirm(this.viewRef, {
      ...this.confirmationConfig,
      message: this.translate.instant('messages.wannaDelete'),
      accept: () => event.row.id ? this.warehousingFacade.deletedOWarehousing(event.row.id) : ''
    });
  }

  /**
   * Pagination
   * @param event
   * */
  page(event: { rows: number, first: number, page: number } & WarehousingModel) {
    cacheClear['updateWarehousingList'].clear();
    this.warehousingFacade.updatePage(event.rows, event.page - 1);
    this.warehousingFacade.updateWarehousingList(
      {
        ...event,
        pageNumber: this.warehousingFacade.warehousingStore.state$().pageNumber$(),
        pageSize: this.warehousingFacade.warehousingStore.state$().pageSize$()
      });
  }
}
