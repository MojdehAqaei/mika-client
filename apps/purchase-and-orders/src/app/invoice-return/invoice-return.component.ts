import { Component, computed, Inject, inject, OnInit } from '@angular/core';
import { AttachmentImplementationService, invoiceReturnImplementationService, PurchaseInvoiceImplementationService } from '@api/lib/impl';
import { AttachmentGateway, getFileUseCaseProvider } from '@domain/lib/document-management';
import { deleteInvoiceReturnUseCaseProvider, getInvoiceReturnListUseCaseProvider, getPurchaseInvoiceListByStateUseCaseProvider, InvoiceReturnGateway, InvoiceReturnModel, invoiceReturnStateDataMapper, InvoiceReturnStateEnum, PurchaseInvoiceGateway, saveInvoiceReturnUseCaseProvider, updateInvoiceReturnStateUseCaseProvider, updateInvoiceReturnUseCaseProvider } from '@domain/lib/purchase-and-orders';
import { cacheClear } from '@sadad/component-lib/src/decorators';
import { ClAction, ClColumn, ClColumnDataType, ClConfirmation, ClTableData } from '@sadad/component-lib/src/models';
import { ClConfirmationService } from '@sadad/component-lib/src/services';
import { AttachmentFacade, InvoiceReturnFacade } from '@state/lib/facade';
import { BaseComponent, CrudComponent } from '@view/lib/components';
import { DataTableAction } from '@view/lib/models';
import { CommonModules, CONFIRMATION_SERVICE_CONFIG } from '@view/lib/values';
import { AddEditInvoiceReturnComponent } from "../add-edit-invoice-return/add-edit-invoice-return.component";
import { InvoiceReturnItemListComponent } from "../invoice-return-item-list/invoice-return-item-list.component";

@Component({
  selector: 'purchase-invoice-return',
  standalone: true,
  imports: [
    CommonModules,
    CrudComponent,
    InvoiceReturnItemListComponent,
    AddEditInvoiceReturnComponent
  ],
  providers: [
    { provide: InvoiceReturnGateway, useClass: invoiceReturnImplementationService },
    { provide: PurchaseInvoiceGateway, useClass: PurchaseInvoiceImplementationService },
    { provide: AttachmentGateway, useClass: AttachmentImplementationService },
    AttachmentFacade,
    getFileUseCaseProvider,
    InvoiceReturnFacade,
    saveInvoiceReturnUseCaseProvider,
    updateInvoiceReturnUseCaseProvider,
    getInvoiceReturnListUseCaseProvider,
    deleteInvoiceReturnUseCaseProvider,
    getPurchaseInvoiceListByStateUseCaseProvider,
    updateInvoiceReturnStateUseCaseProvider,
  ],
  templateUrl: './invoice-return.component.html',
})
export class InvoiceReturnComponent extends BaseComponent<InvoiceReturnModel> implements OnInit {

  protected readonly invoiceReturnFacade = inject(InvoiceReturnFacade);
  readonly #confirmationService = inject(ClConfirmationService);


  contentDialogActiveIndex = 0;
  cols!: ClColumn[];
  actions?: DataTableAction[];

  constructor(@Inject(CONFIRMATION_SERVICE_CONFIG) public confirmationConfig: ClConfirmation) {
    super();
  }

  ngOnInit() {
    this.first$ = computed(() => this.invoiceReturnFacade.invoiceReturnStore.state$().pageNumber$() * this.invoiceReturnFacade.invoiceReturnStore.state$().pageSize$());
    this.showPaginator$ = computed(() => this.invoiceReturnFacade.invoiceReturnStore.state$().total$() > this.invoiceReturnFacade.invoiceReturnStore.state$().pageSize$());
    this.invoiceReturnFacade.updateAllowedActions(this.appFacade.appStore.state$().loggedInUser$()?.permissions?.find(p => p.data.name == this.permissionKey)?.data?.value || []);
    this.cols = [
      {
        colSpan: 1,
        value: ['autoGeneratedCode'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice-return.document-number')
      },
      {
        colSpan: 1,
        value: ['seller.name'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice.seller-name')
      },
      {
        colSpan: 1,
        value: ['invoiceNumber'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice-return.invoice-number')
      },
      {
        colSpan: 1,
        value: ['datePersian'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice-return.date')
      },
      {
        colSpan: 1,
        value: ['purchaseInvoice.value.autoGeneratedCode'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice.document-number')
      },
      {
        colSpan: 1,
        value: ['invoiceDetail.finalAmountGrouped'],
        type: ClColumnDataType.TEXT,
        header: `${this.translate.instant('purchase-and-orders.invoice.final-amount')} (${this.translate.instant('currency.rial')})`
      },
      {
        colSpan: 1,
        value: ['state'],
        valueMapper: [invoiceReturnStateDataMapper],
        cellConfig: [
          { key: "state", value: InvoiceReturnStateEnum.INITIAL_SUBMIT_INVOICE_RETURN, styleClass: "purchase-invoice-state initial-submit-invoice" },
          { key: "state", value: InvoiceReturnStateEnum.WAIT_FOR_DELIVERY_INVOICE_RETURN, styleClass: "purchase-invoice-state wait-for-delivery-invoice" },
          { key: "state", value: InvoiceReturnStateEnum.WAIT_FOR_PAYMENT_RETURN, styleClass: "purchase-invoice-state wait-for-payment" },
          { key: "state", value: InvoiceReturnStateEnum.PAID_RETURN, styleClass: "purchase-invoice-state paid" },
          { key: "state", value: InvoiceReturnStateEnum.CANCEL_INVOICE_RETURN, styleClass: "purchase-invoice-state canceled" },
        ],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('status')
      }
    ];

    this.actions = [
      {
        label: this.translate.instant('edit'),
        icon: 'edit',
        index: 0,
        styleClasses: 'blue-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceReturnStateEnum.INITIAL_SUBMIT_INVOICE_RETURN] }
          ]
        },
        command: (event) => this.openEditDialog(event),
        key: 'Update'
      },
      {
        label: this.translate.instant('delete'),
        icon: 'delete',
        index: 1,
        styleClasses: 'red-text text-darken-2',
        command: (event) => this.deleteInvoice(event),
        key: 'Delete',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceReturnStateEnum.INITIAL_SUBMIT_INVOICE_RETURN] }
          ]
        }
      },
      {
        label: this.translate.instant('final-save'),
        icon: 'send',
        index: 2,
        styleClasses: 'amber-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceReturnStateEnum.INITIAL_SUBMIT_INVOICE_RETURN] }
          ]
        },
        command: (event) => this.invoiceReturnFacade.updateInvoiceReturnState({ ...event.row, nextState: InvoiceReturnStateEnum.WAIT_FOR_DELIVERY_INVOICE_RETURN }),
        key: 'TransferConfirmation'
      },
      {
        label: this.translate.instant('purchase-and-orders.invoice.delivery-confirm'),
        icon: 'package',
        index: 3,
        styleClasses: 'purple-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceReturnStateEnum.WAIT_FOR_DELIVERY_INVOICE_RETURN] }
          ]
        },
        command: (event) => this.invoiceReturnFacade.updateInvoiceReturnState({ ...event.row, nextState: InvoiceReturnStateEnum.WAIT_FOR_PAYMENT_RETURN }),
        key: 'TransferConfirmation'
      },


      {
        label: this.translate.instant('purchase-and-orders.invoice.payment-confirm'),
        icon: 'package',
        index: 4,
        styleClasses: 'purple-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceReturnStateEnum.WAIT_FOR_PAYMENT_RETURN] }
          ]
        },
        command: (event) => this.invoiceReturnFacade.updateInvoiceReturnState({ ...event.row, nextState: InvoiceReturnStateEnum.PAID_RETURN }),
        key: 'PaymentConfirmation'
      },

      {
        label: this.translate.instant('cancel'),
        icon: 'cancel',
        index: 5,
        styleClasses: 'red-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceReturnStateEnum.INITIAL_SUBMIT_INVOICE_RETURN, InvoiceReturnStateEnum.WAIT_FOR_DELIVERY_INVOICE_RETURN] }
          ]
        },
        command: (event) => {
          this.invoiceReturnFacade.updateInvoiceReturnState({ ...event.row, nextState: InvoiceReturnStateEnum.CANCEL_INVOICE_RETURN })
        },
        key: 'Cancel'
      }
    ];
  }

  page(event: { rows: number, first: number, page: number } & InvoiceReturnModel) {
    cacheClear['updateInvoiceReturnList'].clear();
    this.invoiceReturnFacade.updatePage(event.rows, event.page - 1);
    this.invoiceReturnFacade.updateInvoiceReturnList(
      {
        ...event,
        pageNumber: this.invoiceReturnFacade.invoiceReturnStore.state$().pageNumber$(),
        pageSize: this.invoiceReturnFacade.invoiceReturnStore.state$().pageSize$()
      });
  }

  saveOrUpdateInvoiceReturn() {
    this.formGroup?.markAllAsTouched();
  }

  resetForm() {
    this.invoiceReturnFacade.toggleDialogVisibility(false);
    this.formGroup?.markAsUntouched();
  }

  openEditDialog(event: { action: ClAction, row: InvoiceReturnModel }) {
    this.contentDialogActiveIndex = 0;
    this.invoiceReturnFacade.updateSelectedInvoiceReturn(event.row);
    this.invoiceReturnFacade.updatePurchaseInvoiceItemList(event.row.purchaseInvoiceItems || []);
    this.invoiceReturnFacade.toggleEditMode(true);
    this.invoiceReturnFacade.toggleDialogVisibility(true);
  }

  deleteInvoice(event: { action: ClAction, row: InvoiceReturnModel }) {
    this.#confirmationService.confirm(this.viewRef, {
      ...this.confirmationConfig,
      message: this.translate.instant('messages.wannaDelete'),
      accept: () => event.row.id ? this.invoiceReturnFacade.deletedInvoiceReturn(event.row.id) : ''
    });
  }

  filterInvoiceReturn(event: InvoiceReturnModel) {
    this.invoiceReturnFacade.updatePage(this.invoiceReturnFacade.invoiceReturnStore.state$().pageSize$(), 0);
    cacheClear['updateInvoiceReturnList'].clear();
    this.invoiceReturnFacade.updateInvoiceReturnList(
      {
        ...event,
        pageNumber: this.invoiceReturnFacade.invoiceReturnStore.state$().pageNumber$(),
        pageSize: this.invoiceReturnFacade.invoiceReturnStore.state$().pageSize$()
      });
  }

  clearFilters() {
    cacheClear['updateInvoiceReturnList'].clear();
    this.formGroup?.markAsUntouched();
  }

  setEditMode() {
    this.contentDialogActiveIndex = 0;
    this.invoiceReturnFacade.toggleEditMode(false);
    this.invoiceReturnFacade.toggleDialogVisibility(true);
  }

  getItemsList(item: ClTableData) {
    this.invoiceReturnFacade.updateSelectedInvoiceReturn(item.data);
  }

}
