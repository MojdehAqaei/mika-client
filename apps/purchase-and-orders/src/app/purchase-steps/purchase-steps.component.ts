import { Component, computed, Inject, inject, OnInit, signal, ViewEncapsulation, WritableSignal } from '@angular/core';
import { AttachmentImplementationService, OrderImplementationService, PurchaseStepsImplementationService, PurchaseStepsItemImplementationService } from '@api/lib/impl';
import { AttachmentGateway, getAllFilesUseCaseProvider, getFileUseCaseProvider } from '@domain/lib/document-management';
import { deletePurchaseStepsItemUseCaseProvider, deletePurchaseStepsUseCaseProvider, getOrderListByStateUseCaseProvider, getPurchaseStepsItemListUseCaseProvider, getPurchaseStepsListUseCaseProvider, getPurchaseStepTypeListUseCase, OrderGateway, purchaseMethodDataMapper, PurchaseMethodEnum, purchaseScaleDataMapper, PurchaseScaleEnum, PurchaseStepsGateway, PurchaseStepsItemGateway, PurchaseStepsModel, purchaseStepsStateDataMapper, PurchaseStepsStateEnum, purchaseStepTypeDataMapper, PurchaseStepTypeEnum, PurchaseStepTypeModel, savePurchaseStepsItemUseCaseProvider, savePurchaseStepsUseCaseProvider, updatePurchaseStepsStateUseCaseProvider, updatePurchaseStepsUseCaseProvider } from '@domain/lib/purchase-and-orders';
import { cacheClear } from '@sadad/component-lib/src/decorators';
import { ClAction, ClColumn, ClColumnDataType, ClConfirmation, ClTableData } from '@sadad/component-lib/src/models';
import { ClConfirmationService } from '@sadad/component-lib/src/services';
import { AttachmentFacade, PurchaseStepsFacade } from '@state/lib/facade';
import { BaseComponent, CrudComponent } from '@view/lib/components';
import { Crud } from '@view/lib/data-types';
import { DataTableAction } from '@view/lib/models';
import { ActionInvokeService } from '@view/lib/ui-services';
import { CommonModules, CONFIRMATION_SERVICE_CONFIG } from '@view/lib/values';
import { AddEditPurchaseStepsItemComponent } from '../add-edit-purchase-steps-item/add-edit-purchase-steps-item.component';
import { AddEditPurchaseStepsComponent } from '../add-edit-purchase-steps/add-edit-purchase-steps.component';
import { PurchaseStepsItemListComponent } from '../purchase-steps-item-list/purchase-steps-item-list.component';

@Component({
  selector: 'purchase-purchase-steps',
  standalone: true,
  imports: [
    CommonModules,
    CrudComponent,
    PurchaseStepsItemListComponent,
    AddEditPurchaseStepsComponent,
    AddEditPurchaseStepsItemComponent
  ],
  templateUrl: './purchase-steps.component.html',
  styleUrls: ['./purchase-steps.component.scss'],
  encapsulation: ViewEncapsulation.None,
  providers: [
    { provide: PurchaseStepsGateway, useClass: PurchaseStepsImplementationService },
    { provide: PurchaseStepsItemGateway, useClass: PurchaseStepsItemImplementationService },
    { provide: OrderGateway, useClass: OrderImplementationService },
    { provide: AttachmentGateway, useClass: AttachmentImplementationService },
    AttachmentFacade,
    getFileUseCaseProvider,
    PurchaseStepsFacade,
    savePurchaseStepsUseCaseProvider,
    savePurchaseStepsItemUseCaseProvider,
    updatePurchaseStepsUseCaseProvider,
    getPurchaseStepsListUseCaseProvider,
    getPurchaseStepsItemListUseCaseProvider,
    deletePurchaseStepsUseCaseProvider,
    deletePurchaseStepsItemUseCaseProvider,
    getOrderListByStateUseCaseProvider,
    updatePurchaseStepsStateUseCaseProvider,
    getPurchaseStepTypeListUseCase,
    getAllFilesUseCaseProvider
  ]
})
export class PurchaseStepsComponent extends BaseComponent<PurchaseStepsModel> implements OnInit {

  protected readonly purchaseStepsFacade = inject(PurchaseStepsFacade);
  readonly #confirmationService = inject(ClConfirmationService);
  readonly #invokeService = inject(ActionInvokeService);
  actionsType: WritableSignal<Crud> = signal<Crud>('Create');
  actionTitle: WritableSignal<string> = signal<string>('');
  cols!: ClColumn[];
  actions?: DataTableAction[];

  constructor(@Inject(CONFIRMATION_SERVICE_CONFIG) public confirmationConfig: ClConfirmation) {
    super();
  }

  ngOnInit() {
    this.first$ = computed(() => this.purchaseStepsFacade.purchaseStepsStore.state$().pageNumber$() * this.purchaseStepsFacade.purchaseStepsStore.state$().pageSize$());
    this.showPaginator$ = computed(() => this.purchaseStepsFacade.purchaseStepsStore.state$().total$() > this.purchaseStepsFacade.purchaseStepsStore.state$().pageSize$());
    this.purchaseStepsFacade.updateAllowedActions(this.appFacade.appStore.state$().loggedInUser$()?.permissions?.find(p => p.data.name == this.permissionKey)?.data?.value || []);

    this.cols = [
      {
        colSpan: 1,
        value: ['autoGeneratedCode'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.purchase-steps.code')
      },
      {
        colSpan: 1,
        value: ['purchaseScale'],
        type: ClColumnDataType.TEXT,
        valueMapper: [purchaseScaleDataMapper],
        cellConfig: [
          { key: "purchaseScale", value: PurchaseScaleEnum.SMALL },
          { key: "purchaseScale", value: PurchaseScaleEnum.AVERAGE },
          { key: "purchaseScale", value: PurchaseScaleEnum.MACRO },
        ],
        header: this.translate.instant('purchase-and-orders.purchase-steps.purchase-scale')
      },
      {
        colSpan: 1,
        value: ['purchaseMethod'],
        valueMapper: [purchaseMethodDataMapper],
        cellConfig: [
          { key: "purchaseMethod", value: PurchaseMethodEnum.DIRECT_PURCHASE },
          { key: "purchaseMethod", value: PurchaseMethodEnum.PUBLIC_NOTICE },
        ],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.purchase-steps.purchase-method')
      },
      {
        colSpan: 1,
        value: ['purchaseStepType'],
        valueMapper: [purchaseStepTypeDataMapper],
        cellConfig: [
          { key: "purchaseStepType", value: PurchaseStepTypeEnum.HEADQUARTERS_SYSTEM },
          { key: "purchaseStepType", value: PurchaseStepTypeEnum.REFER_TO_THE_SELLER },
        ],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.purchase-steps.purchase-type')
      },
      {
        colSpan: 1,
        value: ['purchaseStepNumber'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.purchase-steps.reference-number')
      },
      {
        colSpan: 1,
        value: ['datePersian'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.purchase-steps.date')
      },
      {
        colSpan: 1,
        value: ['order.label'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice.order-code')
      },
      {
        colSpan: 1,
        value: ['state'],
        valueMapper: [purchaseStepsStateDataMapper],
        cellConfig: [
          { key: "state", value: PurchaseStepsStateEnum.INITIAL_SUBMIT, styleClass: "purchase-steps-state initial-submit-invoice" },
          { key: "state", value: PurchaseStepsStateEnum.BUYING, styleClass: "purchase-steps-state wait-for-delivery-invoice" },
          { key: "state", value: PurchaseStepsStateEnum.FINISH_BUY, styleClass: "purchase-steps-state paid" },
          { key: "state", value: PurchaseStepsStateEnum.CANCEL_BUY, styleClass: "purchase-steps-state canceled" },
        ],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('status')
      }
    ];

    this.actions = [
      {
        label: this.translate.instant('edit'),
        icon: 'edit',
        index: 0,
        styleClasses: 'blue-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [PurchaseStepsStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => this.openEditDialog(event, 'Update'),
        key: 'Update'
      },
      {
        label: this.translate.instant('delete'),
        icon: 'delete',
        index: 1,
        styleClasses: 'red-text text-darken-2',
        command: (event) => this.deleteInvoice(event),
        key: 'Delete',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [PurchaseStepsStateEnum.INITIAL_SUBMIT] }
          ]
        }
      },
      {
        label: this.translate.instant('final-save'),
        icon: 'send',
        index: 2,
        styleClasses: 'amber-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [PurchaseStepsStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => this.purchaseStepsFacade.updatePurchaseStepsState({ ...event.row, nextState: PurchaseStepsStateEnum.BUYING }),
        key: 'Finalize'
      },
      {
        label: this.translate.instant('purchase-and-orders.purchase-steps.buying'),
        icon: 'package',
        index: 3,
        styleClasses: 'purple-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [PurchaseStepsStateEnum.BUYING] }
          ]
        },
        command: (event) => this.purchaseStepsFacade.updatePurchaseStepsState({ ...event.row, nextState: PurchaseStepsStateEnum.FINISH_BUY }),
        key: 'PurchaseComplete'
      },


      {
        label: this.translate.instant('purchase-and-orders.purchase-steps.add-steps'),
        icon: 'package',
        index: 4,
        styleClasses: 'purple-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [PurchaseStepsStateEnum.INITIAL_SUBMIT] }
          ]
        },
        command: (event) => {
          this.openEditDialog(event, 'PurchaseReferenceAddSteps');
          const type: PurchaseStepTypeModel = {
            purchaseReferenceType: event.row.purchaseStepType,
            purchaseScale: event.row.purchaseScale,
            purchaseMethod: event.row.purchaseMethod,
          }
          this.purchaseStepsFacade.updatePurchaseStepTypeList(type)
        },
        key: 'PurchaseReferenceAddSteps'
      },

      {
        label: this.translate.instant('cancel'),
        icon: 'cancel',
        index: 5,
        styleClasses: 'red-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [PurchaseStepsStateEnum.INITIAL_SUBMIT, PurchaseStepsStateEnum.BUYING] }
          ]
        },
        command: (event) => {
          this.purchaseStepsFacade.updatePurchaseStepsState({ ...event.row, nextState: PurchaseStepsStateEnum.CANCEL_BUY })
        },
        key: 'Cancel'
      }
    ];
  }

  page(event: { rows: number, first: number, page: number } & PurchaseStepsModel) {
    cacheClear['updatePurchaseStepsList'].clear();
    this.purchaseStepsFacade.updatePage(event.rows, event.page - 1);
    this.purchaseStepsFacade.updatePurchaseStepsList(
      {
        ...event,
        pageNumber: this.purchaseStepsFacade.purchaseStepsStore.state$().pageNumber$(),
        pageSize: this.purchaseStepsFacade.purchaseStepsStore.state$().pageSize$()
      });
  }

  openEditDialog(event: { action: ClAction, row: PurchaseStepsModel }, action: Crud) {
    this.actionsType.set(action);
    this.actionTitle.set(
      action == 'Update' ? this.translate.instant('purchase-and-orders.purchase-steps.edit') :
        this.translate.instant('purchase-and-orders.purchase-steps.list'));
    this.purchaseStepsFacade.toggleEditMode(true);
    this.purchaseStepsFacade.updateSelectedPurchaseSteps(event.row);
    this.purchaseStepsFacade.toggleDialogVisibility(true);
  }

  saveOrUpdatePurchaseSteps() {
    this.#invokeService.invokeMethod('add or update purchase steps');
  }

  openCreateDialog() {
    this.actionsType.set('Create');
    this.actionTitle.set(this.translate.instant('purchase-and-orders.purchase-steps.create'));
    this.purchaseStepsFacade.updateSelectedPurchaseSteps({});
    this.purchaseStepsFacade.toggleEditMode(false);
    this.purchaseStepsFacade.toggleDialogVisibility(true);
  }

  resetForm() {
    this.purchaseStepsFacade.toggleDialogVisibility(false);
    this.formGroup?.markAsUntouched();
  }


  deleteInvoice(event: { action: ClAction, row: PurchaseStepsModel }) {
    this.#confirmationService.confirm(this.viewRef, {
      ...this.confirmationConfig,
      message: this.translate.instant('messages.wannaDelete'),
      accept: () => event.row.id ? this.purchaseStepsFacade.deletedPurchaseSteps(event.row.id) : ''
    });
  }

  filterPurchaseSteps(event: PurchaseStepsModel) {
    this.purchaseStepsFacade.updatePage(this.purchaseStepsFacade.purchaseStepsStore.state$().pageSize$(), 0);
    cacheClear['updatePurchaseSteps'].clear();
    this.purchaseStepsFacade.updatePurchaseStepsList(
      {
        ...event,
        pageNumber: this.purchaseStepsFacade.purchaseStepsStore.state$().pageNumber$(),
        pageSize: this.purchaseStepsFacade.purchaseStepsStore.state$().pageSize$()
      });
  }

  clearFilters() {
    cacheClear['updatePurchaseSteps'].clear();
    this.formGroup?.markAsUntouched();
  }

  getItemsList(item: ClTableData) {
    this.purchaseStepsFacade.updateSelectedPurchaseSteps(item.data);
  }

}
