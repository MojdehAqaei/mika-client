import {
  Component,
  effect,
  inject,
  Input,
  output,
  untracked
} from '@angular/core';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { InvoiceStateEnum, PurchaseInvoiceModel, purchaseInvoiceStateDataMapper } from '@domain/lib/purchase-and-orders';
import { ClStepsComponent } from '@sadad/component-lib/src/lib/steps';
import { ClStepItem } from '@sadad/component-lib/src/models';
import { PurchaseInvoiceFacade } from '@state/lib/facade';
import { BaseComponent } from '@view/lib/components';
import { CommonModules } from '@view/lib/values';
import { PurchaseInvoiceDetailForm } from '../../forms/purchase-invoice-detail.form';
import { PurchaseInvoiceForm } from '../../forms/purchase-invoice.form';
import { PurchaseInvoiceInitialStepComponent } from './purchase-invoice-initial-step/purchase-invoice-initial-step.component';
import { PurchaseInvoiceSecondStepComponent } from './purchase-invoice-second-step/purchase-invoice-second-step.component';
import { PurchaseInvoiceThirdStepComponent } from './purchase-invoice-third-step/purchase-invoice-third-step.component';

@Component({
  selector: 'purchase-add-edit-purchase-invoice',
  standalone: true,
  imports: [
    CommonModules,
    PurchaseInvoiceInitialStepComponent,
    PurchaseInvoiceSecondStepComponent,
    PurchaseInvoiceThirdStepComponent,
    ClStepsComponent,
  ],
  templateUrl: './add-edit-purchase-invoice.component.html',
  styleUrl: './add-edit-purchase-invoice.component.scss',
})
export class AddEditPurchaseInvoiceComponent
  extends BaseComponent<PurchaseInvoiceModel> {

  readonly purchaseInvoiceFacade = inject(PurchaseInvoiceFacade);

  @Input() activeIndex = 0;
  steps!: ClStepItem[];
  stepChange = output<number>();

  constructor() {
    super();
    this.initializeForm();
    this.setupDialogEffect();
    this.setupFormEffect();
    this.initializeSteps();
  }

  private initializeForm(): void {
    this.formGroup = new FormGroup({
      initialStep: new FormGroup<PurchaseInvoiceForm>({
        id: new FormControl,
        order: new FormControl(null, { nonNullable: true }),
        autoGeneratedCode: new FormControl({ value: null, disabled: true }),
        state: new FormControl({ value: InvoiceStateEnum.INITIAL_SUBMIT_INVOICE, disabled: true }, { nonNullable: true }),
        invoiceStateString: new FormControl({ value: this.translateInvoiceState(InvoiceStateEnum.INITIAL_SUBMIT_INVOICE), disabled: true }, { nonNullable: true }),
        invoiceNumber: new FormControl('', [Validators.required]),
        seller: new FormControl(null, [Validators.required]),
        date: new FormControl(new Date(), { nonNullable: true }),
        description: new FormControl,
        attachedFiles: new FormControl
      }),
      invoiceDetail: new FormGroup<PurchaseInvoiceDetailForm>({
        additionsAmount: new FormControl(null),
        deductionsAmount: new FormControl(null),
        finalAmount: new FormControl({ value: null, disabled: true }),
        invoiceItemList: new FormArray<FormGroup>([])
      }),
    });
  }

  private setupDialogEffect(): void {
    effect(() => {
      const dismissed = this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().dialogVisible$();
      untracked(() => {
        if (!dismissed) {
          this.purchaseInvoiceFacade.purchaseInvoiceStore.updateSelectedPurchaseInvoice({});
          this.purchaseInvoiceFacade.purchaseInvoiceStore.updateEditMode(false);
          this.resetForm();
        }
      })
    })
  }

  private setupFormEffect(): void {
    effect(() => {
      const editMode = this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().editMode$();
      const selectedInvoice = this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().selectedPurchaseInvoice$();
      untracked(() => {
        if (editMode) {
          this.formGroup.get('initialStep')?.patchValue(selectedInvoice);
        }
      });
    });
  }

  translateInvoiceState(state: InvoiceStateEnum): string {
    return purchaseInvoiceStateDataMapper.get(state) as string
  }

  private initializeSteps(): void {
    this.steps = [
      {
        label: this.translate.instant('purchase-and-orders.invoice.saveDelivery'),
        status: false,
      },
      {
        label: this.translate.instant('purchase-and-orders.invoice.save-goods-service'),
        status: false,
      },
      {
        label: this.translate.instant('view-and-send'),
        status: false,
      },
    ];
  }

  resetForm() {
    this.formGroup.reset();
    this.formGroup.markAsUntouched();
    this.formGroup.markAsPristine();
  }

  nextStep(): void {
    this.formGroup.markAllAsTouched();
    const isFormValid = this.isCurrentStepValid();

    if (isFormValid) {
      this.steps[this.activeIndex].status = true;
    }
  }

  private isCurrentStepValid(): boolean {
    switch (this.activeIndex) {
      case 0:
        return this.isInitialStepValid();
      case 1:
        return this.isInvoiceDetailStepValid();
      default:
        return false;
    }
  }

  private isInitialStepValid(): boolean {
    const initialStepFormGroup = this.formGroup.get('initialStep');
    const isValid = initialStepFormGroup?.valid || false;

    if (isValid) {
      const updatedInvoice: PurchaseInvoiceModel = {
        ...this.formGroup.get("initialStep")?.getRawValue(),
        invoiceDetail: this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().selectedPurchaseInvoice$().invoiceDetail
      };
      this.purchaseInvoiceFacade.purchaseInvoiceStore.updateSelectedPurchaseInvoice(updatedInvoice);
    }

    return isValid;
  }

  private isInvoiceDetailStepValid(): boolean {
    const hasInvoiceItems = !!this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().selectedPurchaseInvoice$()
      ?.invoiceDetail?.invoiceItemList?.
      filter((item) => !item.isDeleted)?.length;
    return hasInvoiceItems;
  }

  confirm(): void {
    const invoice = this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().selectedPurchaseInvoice$();
    const isEditMode = this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().editMode$();

    if (isEditMode) {
      this.purchaseInvoiceFacade.updatedPurchaseInvoice(invoice);
    } else {
      this.purchaseInvoiceFacade.savedPurchaseInvoice(invoice);
    }
    this.resetForm();
    this.closeDialog();
  }

  closeDialog(): void {
    this.purchaseInvoiceFacade.toggleDialogVisibility(false);
  }
}
