import { Component, effect, inject, Input, OnInit, output, untracked } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { OrderItemModel, OrderModel, orderStateDataMapper, OrderStateEnum } from '@domain/lib/purchase-and-orders';
import { ClStepsComponent } from '@sadad/component-lib/src/lib/steps';
import { ClStepItem } from '@sadad/component-lib/src/models';
import { OrderFacade } from '@state/lib/facade';
import { BaseComponent } from '@view/lib/components';
import { FormValidatorService } from '@view/lib/ui-services';
import { CommonModules } from '@view/lib/values';
import { OrderItemForm } from '../../forms/order-item.form';
import { OrderForm } from '../../forms/order.form';
import { OrderInitialStepComponent } from './order-initial-step/order-initial-step.component';
import { OrderSecondStepComponent } from './order-second-step/order-second-step.component';
import { OrderThirdStepComponent } from './order-third-step/order-third-step.component';

@Component({
  selector: 'purchase-add-edit-order',
  standalone: true,
  imports: [CommonModules, ClStepsComponent, OrderInitialStepComponent, OrderSecondStepComponent, OrderThirdStepComponent],
  templateUrl: './add-edit-order.component.html',
  styleUrl: './add-edit-order.component.scss',
})
export class AddEditOrderComponent extends BaseComponent<OrderModel> implements OnInit {
  protected readonly orderFacade = inject(OrderFacade);

  @Input() activeIndex = 0;
  steps!: ClStepItem[];

  stepChange = output<number>();

  constructor() {
    super();

    this.formGroup = this.fb.group({
      initialStep: this.fb.group<OrderForm>({
        id: new FormControl,
        date: new FormControl(null, { validators: [Validators.required] }),
        autoGeneratedCode: new FormControl({ value: null, disabled: true }, { nonNullable: true }),
        state: new FormControl({ value: OrderStateEnum.INITIAL_SUBMIT, disabled: true }, { nonNullable: true }),
        stateString: new FormControl({ value: orderStateDataMapper.get(OrderStateEnum.INITIAL_SUBMIT), disabled: true }, { nonNullable: true }),
        orderType: new FormControl(null, { validators: [Validators.required] }),
        supplyMethod: new FormControl(null, { validators: [Validators.required] }),
        description: new FormControl,
        agent: new FormControl(null, { validators: [Validators.required] }),
        attachedFiles: new FormControl
      }),
      orderItems: this.fb.group<OrderItemForm>({
        goodsId: new FormControl(null, { nonNullable: true, validators: [Validators.required] }),
        goodsLabel: new FormControl,
        goodsCode: new FormControl,
        isGoodsFloat: new FormControl,
        countingUnitId: new FormControl,
        countingUnitTitle: new FormControl({ value: null, disabled: true }),
        quantity: new FormControl(null, { validators: [Validators.required, FormValidatorService.noWhitespace] }),
        applicantOrganizationId: new FormControl(null, { validators: [Validators.required] }),
        applicantOrganizationLabel: new FormControl,
        requestLetterNumber: new FormControl,
        requestLetterDate: new FormControl,
        requestLetterDatePersian: new FormControl,
        description: new FormControl
      })
    });


    effect(() => {
      const edit = this.orderFacade.orderStore.state$().editMode$();
      const selectedOrder = this.orderFacade.orderStore.state$().selectedOrder$();

      untracked(() => {
        if (edit) {
          this.formGroup.patchValue({ initialStep: selectedOrder });
        } else {
          this.formGroup.reset();
        }
      });
    });
  }

  ngOnInit() {
    this.steps = [
      { label: this.translate.instant('purchase-and-orders.order.save-order'), status: false },
      { label: this.translate.instant('purchase-and-orders.order.save-order-detail'), status: false },
      { label: this.translate.instant('view-and-send'), status: false }
    ];
  }

  saveOrUpdateOrder() {
    let isValid = false;
    let orderItems: OrderItemModel[] | undefined;

    switch (this.activeIndex) {
      case 0:
        this.formGroup?.markAllAsTouched();
        if (this.formGroup.get('initialStep')?.valid) {
          isValid = true;
        }
        break;
      case 1:
        if (this.orderFacade.orderStore.state$().selectedOrder$()?.orderItems?.length) {
          isValid = true;
        }
        break;
      case 2:
        isValid = true;
        break;
      default:
        //
        break;
    }
    if (isValid) {
      this.steps[this.activeIndex].status = true;

      if (this.activeIndex == 2) {
        orderItems = this.orderFacade.orderStore.state$().selectedOrder$()?.orderItems;
        const obj: OrderModel = {
          ...this.formGroup.get('initialStep')?.getRawValue(),
          orderItems: orderItems
        };

        this.orderFacade.orderStore.state$().editMode$()
          ? this.orderFacade.updatedOrder(obj)
          : this.orderFacade.savedOrder(obj)
      }

      this.formGroup.markAsUntouched();
    }
  }

  closeTheDialog() {
    this.orderFacade.toggleDialogVisibility(false);
  }

}
