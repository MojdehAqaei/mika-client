import { Component, computed, Inject, inject, OnInit, ViewEncapsulation } from '@angular/core';
import { AttachmentImplementationService, OrderImplementationService, PurchaseInvoiceImplementationService } from '@api/lib/impl';
import { AttachmentGateway, getFileUseCaseProvider } from '@domain/lib/document-management';
import {
  deletePurchaseInvoiceUseCaseProvider,
  getOrderListByStateUseCaseProvider,
  getPurchaseInvoiceListUseCaseProvider,
  InvoiceStateEnum,
  OrderGateway,
  PurchaseInvoiceGateway,
  PurchaseInvoiceModel,
  purchaseInvoiceStateDataMapper,
  savePurchaseInvoiceUseCaseProvider,
  updatePurchaseInvoiceStateUseCaseProvider,
  updatePurchaseInvoiceUseCaseProvider
} from '@domain/lib/purchase-and-orders';
import { cacheClear } from '@sadad/component-lib/src/decorators';
import { ClAction, ClColumn, ClColumnDataType, ClConfirmation, ClTableData } from '@sadad/component-lib/src/models';
import { ClConfirmationService } from '@sadad/component-lib/src/services';
import { AttachmentFacade, PurchaseInvoiceFacade } from '@state/lib/facade';
import { BaseComponent, CrudComponent } from '@view/lib/components';
import { DataTableAction } from '@view/lib/models';
import { CommonModules, CONFIRMATION_SERVICE_CONFIG } from '@view/lib/values';
import { AddEditPurchaseInvoiceComponent } from "../add-edit-purchase-invoice/add-edit-purchase-invoice.component";
import { PurchaseInvoiceItemListComponent } from "../purchase-invoice-item-list/purchase-invoice-item-list.component";

@Component({
  selector: 'purchase-purchase-invoice',
  standalone: true,
  imports: [
    CommonModules,
    CrudComponent,
    PurchaseInvoiceItemListComponent,
    AddEditPurchaseInvoiceComponent,
  ],
  templateUrl: './purchase-invoice.component.html',
  styleUrl: './purchase-invoice.component.scss',
  encapsulation: ViewEncapsulation.None,
  providers: [
    { provide: PurchaseInvoiceGateway, useClass: PurchaseInvoiceImplementationService },
    { provide: OrderGateway, useClass: OrderImplementationService },
    { provide: AttachmentGateway, useClass: AttachmentImplementationService },
    AttachmentFacade,
    getFileUseCaseProvider,
    PurchaseInvoiceFacade,
    savePurchaseInvoiceUseCaseProvider,
    updatePurchaseInvoiceUseCaseProvider,
    getPurchaseInvoiceListUseCaseProvider,
    deletePurchaseInvoiceUseCaseProvider,
    getOrderListByStateUseCaseProvider,
    updatePurchaseInvoiceStateUseCaseProvider,
  ]
})
export class PurchaseInvoiceComponent extends BaseComponent<PurchaseInvoiceModel> implements OnInit {
  protected readonly purchaseInvoiceFacade = inject(PurchaseInvoiceFacade);
  readonly #confirmationService = inject(ClConfirmationService);


  contentDialogActiveIndex = 0;
  cols!: ClColumn[];
  actions?: DataTableAction[];

  constructor(@Inject(CONFIRMATION_SERVICE_CONFIG) public confirmationConfig: ClConfirmation) {
    super();
  }

  ngOnInit() {
    this.first$ = computed(() => this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().pageNumber$() * this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().pageSize$());
    this.showPaginator$ = computed(() => this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().total$() > this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().pageSize$());
    this.purchaseInvoiceFacade.updateAllowedActions(this.appFacade.appStore.state$().loggedInUser$()?.permissions?.find(p => p.data.name == this.permissionKey)?.data?.value || []);
    this.cols = [
      {
        colSpan: 1,
        value: ['autoGeneratedCode'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice.invoice-code')
      },
      {
        colSpan: 1,
        value: ['seller.name'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice.seller-name')
      },
      {
        colSpan: 1,
        value: ['invoiceNumber'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice.seller-invoice-code')
      },
      {
        colSpan: 1,
        value: ['datePersian'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice.seller-invoice-date')
      },
      {
        colSpan: 1,
        value: ['order.label'],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('purchase-and-orders.invoice.order-code')
      },
      {
        colSpan: 1,
        value: ['invoiceDetail.finalAmountGrouped'],
        type: ClColumnDataType.TEXT,
        header: `${this.translate.instant('purchase-and-orders.invoice.final-amount')} (${this.translate.instant('currency.rial')})`
      },
      {
        colSpan: 1,
        value: ['state'],
        valueMapper: [purchaseInvoiceStateDataMapper],
        cellConfig: [
          { key: "state", value: InvoiceStateEnum.INITIAL_SUBMIT_INVOICE, styleClass: "purchase-invoice-state initial-submit-invoice" },
          { key: "state", value: InvoiceStateEnum.WAIT_FOR_DELIVERY_INVOICE, styleClass: "purchase-invoice-state wait-for-delivery-invoice" },
          { key: "state", value: InvoiceStateEnum.WAIT_FOR_PAYMENT, styleClass: "purchase-invoice-state wait-for-payment" },
          { key: "state", value: InvoiceStateEnum.PAID, styleClass: "purchase-invoice-state paid" },
          { key: "state", value: InvoiceStateEnum.CANCEL_INVOICE, styleClass: "purchase-invoice-state canceled" },
        ],
        type: ClColumnDataType.TEXT,
        header: this.translate.instant('status')
      }
    ];

    this.actions = [
      {
        label: this.translate.instant('edit'),
        icon: 'edit',
        index: 0,
        styleClasses: 'blue-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceStateEnum.INITIAL_SUBMIT_INVOICE] }
          ]
        },
        command: (event) => this.openEditDialog(event),
        key: 'Update'
      },
      {
        label: this.translate.instant('delete'),
        icon: 'delete',
        index: 1,
        styleClasses: 'red-text text-darken-2',
        command: (event) => this.deleteInvoice(event),
        key: 'Delete',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceStateEnum.INITIAL_SUBMIT_INVOICE] }
          ]
        }
      },
      {
        label: this.translate.instant('final-save'),
        icon: 'send',
        index: 2,
        styleClasses: 'amber-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceStateEnum.INITIAL_SUBMIT_INVOICE] }
          ]
        },
        command: (event) => this.confirmInvoiceStateChange(event, InvoiceStateEnum.WAIT_FOR_DELIVERY_INVOICE),
        key: 'TransferConfirmation'
      },
      {
        label: this.translate.instant('purchase-and-orders.invoice.delivery-confirm'),
        icon: 'package',
        index: 3,
        styleClasses: 'purple-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceStateEnum.WAIT_FOR_DELIVERY_INVOICE] }
          ]
        },
        command: (event) => this.confirmInvoiceStateChange(event, InvoiceStateEnum.WAIT_FOR_PAYMENT),
        key: 'TransferConfirmation'
      },


      {
        label: this.translate.instant('purchase-and-orders.invoice.payment-confirm'),
        icon: 'package',
        index: 4,
        styleClasses: 'purple-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceStateEnum.WAIT_FOR_PAYMENT] }
          ]
        },
        command: (event) => this.confirmInvoiceStateChange(event, InvoiceStateEnum.PAID),
        key: 'PaymentConfirmation'
      },

      {
        label: this.translate.instant('cancel'),
        icon: 'cancel',
        index: 5,
        styleClasses: 'red-text text-darken-2',
        status: {
          status: false,
          on: [
            { rowField: 'state', rowValue: [InvoiceStateEnum.INITIAL_SUBMIT_INVOICE, InvoiceStateEnum.WAIT_FOR_DELIVERY_INVOICE] }
          ]
        },
        command: (event) => this.confirmInvoiceStateChange(event, InvoiceStateEnum.CANCEL_INVOICE),
        key: 'Cancel'
      }
    ];
  }

  page(event: { rows: number, first: number, page: number } & PurchaseInvoiceModel) {
    cacheClear['updatePurchaseInvoiceList'].clear();
    this.purchaseInvoiceFacade.updatePage(event.rows, event.page - 1);
    this.purchaseInvoiceFacade.updatePurchaseInvoiceList(
      {
        ...event,
        pageNumber: this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().pageNumber$(),
        pageSize: this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().pageSize$()
      });
  }

  saveOrUpdatePurchaseInvoice() {
    this.formGroup?.markAllAsTouched();
  }

  resetForm() {
    this.purchaseInvoiceFacade.toggleDialogVisibility(false);
    this.formGroup?.markAsUntouched();
  }

  confirmInvoiceStateChange(event: { action: DataTableAction, row: PurchaseInvoiceModel }, nextState: InvoiceStateEnum) {
    this.#confirmationService.confirm(this.viewRef, {
      ...this.confirmationConfig,
      message: this.translate.instant('messages.sure-to-change-state', { value: this.translate.instant('purchase-and-orders.invoice.') }),
      accept: () => this.purchaseInvoiceFacade.updatePurchaseInvoiceState({ ...event.row, nextState: nextState }),
    });
  }

  openEditDialog(event: { action: ClAction, row: PurchaseInvoiceModel }) {
    this.contentDialogActiveIndex = 0;
    this.purchaseInvoiceFacade.updateSelectedPurchaseInvoice(event.row);
    this.purchaseInvoiceFacade.updateOrderItemListPerOrderId(event.row.orderItems || []);
    this.purchaseInvoiceFacade.toggleEditMode(true);
    this.purchaseInvoiceFacade.toggleDialogVisibility(true);
  }

  deleteInvoice(event: { action: ClAction, row: PurchaseInvoiceModel }) {
    this.#confirmationService.confirm(this.viewRef, {
      ...this.confirmationConfig,
      message: this.translate.instant('messages.wannaDelete'),
      accept: () => event.row.id ? this.purchaseInvoiceFacade.deletedPurchaseInvoice(event.row.id) : ''
    });
  }

  filterPurchaseInvoice(event: PurchaseInvoiceModel) {
    this.purchaseInvoiceFacade.updatePage(this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().pageSize$(), 0);
    cacheClear['updatePurchaseInvoiceList'].clear();
    this.purchaseInvoiceFacade.updatePurchaseInvoiceList(
      {
        ...event,
        pageNumber: this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().pageNumber$(),
        pageSize: this.purchaseInvoiceFacade.purchaseInvoiceStore.state$().pageSize$()
      });
  }

  clearFilters() {
    cacheClear['updatePurchaseInvoiceList'].clear();
    this.formGroup?.markAsUntouched();
  }

  setEditMode() {
    this.contentDialogActiveIndex = 0;
    this.purchaseInvoiceFacade.toggleEditMode(false);
    this.purchaseInvoiceFacade.toggleDialogVisibility(true);
  }

  getItemsList(item: ClTableData) {
    this.purchaseInvoiceFacade.updateSelectedPurchaseInvoice(item.data);
  }
}
