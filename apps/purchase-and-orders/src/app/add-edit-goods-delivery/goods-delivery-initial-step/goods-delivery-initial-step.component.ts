import { HttpContext } from '@angular/common/http';
import { Component, effect, inject, Inject, OnInit, untracked } from '@angular/core';
import { FormControl, FormGroup, FormGroupDirective, Validators } from '@angular/forms';
import {
  baseDocumentTypeOptions,
  deliveryTypeOptions,
  GOODS_DELIVERY_BASE_DOCUMENT_TYPE,
  GOODS_DELIVERY_TYPE,
  GoodsDeliveryModel,
  goodsDeliveryStateDataMapper,
  GoodsDeliveryStateEnum,
  GoodsDeliveryTypeEnum
} from '@domain/lib/purchase-and-orders';
import { SKIP_LOADING } from '@sadad/component-lib/src/interceptors';
import { ClDatePickerComponent } from '@sadad/component-lib/src/lib/date-picker';
import { ClSelectItem } from '@sadad/component-lib/src/models';
import { GoodsDeliveryFacade } from '@state/lib/facade';
import { BaseComponent } from '@view/lib/components';
import { CommonModules } from '@view/lib/values';
import { GoodsDeliveryForm } from '../../../forms/goods-delivery.form';
import { DelivererReceiverService } from '../../../services/deliverer-receiver/deliverer-receiver.service';


@Component({
  selector: 'purchase-goods-delivery-initial-step',
  standalone: true,
  imports: [CommonModules, ClDatePickerComponent],
  providers: [
    { provide: GOODS_DELIVERY_TYPE, useValue: deliveryTypeOptions },
    { provide: GOODS_DELIVERY_BASE_DOCUMENT_TYPE, useValue: baseDocumentTypeOptions },
  ],
  templateUrl: './goods-delivery-initial-step.component.html',
  styleUrl: './goods-delivery-initial-step.component.scss',
})
export class GoodsDeliveryInitialStepComponent extends BaseComponent<GoodsDeliveryModel> implements OnInit {
  readonly goodsDeliveryFacade = inject(GoodsDeliveryFacade);
  readonly #parentFormGroup = inject(FormGroupDirective);
  readonly #delivererReceiverService = inject(DelivererReceiverService);

  delivererUrl!: string;
  delivererLabel!: string;
  receiverUrl!: string;
  receiverLabel!: string;
  httpContext = new HttpContext().set(SKIP_LOADING, true);

  constructor(@Inject(GOODS_DELIVERY_TYPE) public deliveryTypeOptions: ClSelectItem[],
    @Inject(GOODS_DELIVERY_BASE_DOCUMENT_TYPE) public baseDocumentTypeOptions: ClSelectItem[]) {
    super();
    this.formGroup = this.#parentFormGroup.control.get("initialStep") as FormGroup<GoodsDeliveryForm>;

    effect(() => {
      const edit = this.goodsDeliveryFacade.goodsDeliveryStore.state$().editMode$();
      const isFormStepValid = this.goodsDeliveryFacade.goodsDeliveryStore.state$().isFormStepValid$();
      const selectedGoodsDelivery = this.goodsDeliveryFacade.goodsDeliveryStore.state$().selectedGoodsDelivery$();

      untracked(() => {
        this.formGroup.reset(selectedGoodsDelivery);
        [this.delivererUrl, this.delivererLabel, this.receiverUrl, this.receiverLabel] = this.#delivererReceiverService.setDelivererAndReceiver(<GoodsDeliveryTypeEnum>this.formGroup.get('deliveryType')?.value);
        if (edit) {
          this.formGroup.get('delivererId')?.enable();
          this.formGroup.get('receiverId')?.enable();
        } else if (isFormStepValid) {
          this.formGroup.markAsUntouched();
        }
      });
    });
  }

  ngOnInit() {
    this.addFormControls();
  }

  addFormControls() {
    if (!this.formGroup.get('id')) {
      this.formGroup.addControl('id', new FormControl);
    }
    if (!this.formGroup.get('date')) {
      this.formGroup.addControl('date', new FormControl(null, { validators: [Validators.required] }));
    }
    if (!this.formGroup.get('autoGeneratedCode')) {
      this.formGroup.addControl('autoGeneratedCode', new FormControl({ value: '', disabled: true }, { nonNullable: true }));
    }
    if (!this.formGroup.get('stateString')) {
      this.formGroup.addControl('stateString', new FormControl({ value: goodsDeliveryStateDataMapper.get(GoodsDeliveryStateEnum.INITIAL_SUBMIT), disabled: true }, { nonNullable: true }));
    }
    if (!this.formGroup.get('deliveryType')) {
      this.formGroup.addControl('deliveryType', new FormControl(null, { validators: [Validators.required] }));
    }
    if (!this.formGroup.get('baseDocumentType')) {
      this.formGroup.addControl('baseDocumentType', new FormControl({ value: null, disabled: true }));
    }
    if (!this.formGroup.get('baseDocumentNumber')) {
      this.formGroup.addControl('baseDocumentNumber', new FormControl);
    }
    if (!this.formGroup.get('baseDocumentDate')) {
      this.formGroup.addControl('baseDocumentDate', new FormControl);
    }
    if (!this.formGroup.get('delivererId')) {
      this.formGroup.addControl('delivererId', new FormControl({ value: null, disabled: true }, { validators: [Validators.required] }));
    }
    if (!this.formGroup.get('delivererLabel')) {
      this.formGroup.addControl('delivererLabel', new FormControl);
    }
    if (!this.formGroup.get('receiverId')) {
      this.formGroup.addControl('receiverId', new FormControl({ value: null, disabled: true }, { validators: [Validators.required] }));
    }
    if (!this.formGroup.get('receiverLabel')) {
      this.formGroup.addControl('receiverLabel', new FormControl);
    }
    if (!this.formGroup.get('description')) {
      this.formGroup.addControl('description', new FormControl);
    }
  }

  setDelivererAndReceiverUrls() {
    this.formGroup.get('delivererId')?.reset();
    this.formGroup.get('delivererLabel')?.reset();
    this.formGroup.get('receiverId')?.reset();
    this.formGroup.get('receiverLabel')?.reset();
    if (this.formGroup.get('deliveryType')?.value) {
      this.formGroup.get('delivererId')?.enable();
      this.formGroup.get('receiverId')?.enable();
    } else {
      this.formGroup.get('delivererId')?.disable();
      this.formGroup.get('receiverId')?.disable();
    }

    [this.delivererUrl, this.delivererLabel, this.receiverUrl, this.receiverLabel] = this.#delivererReceiverService.setDelivererAndReceiver(<GoodsDeliveryTypeEnum>this.formGroup.get('deliveryType')?.value);
  }

  setBaseDocumentType() {
    const type = this.#delivererReceiverService.setBaseDocumentType(<GoodsDeliveryTypeEnum>this.formGroup.get('deliveryType')?.value);
    this.formGroup.get('baseDocumentType')?.setValue(type);
  }

  setDelivererLabel(event: any) {
    const label = event['typeName'] ? event['typeName'] + ' ' + event['name'] : event['name'] || event['title'];
    this.formGroup.get('delivererLabel')?.setValue(label);
  }

  setReceiverLabel(event: any) {
    const label = event['typeName'] ? event['typeName'] + ' ' + event['name'] : event['name'] || event['title'];
    this.formGroup.get('receiverLabel')?.setValue(label);
  }
}
